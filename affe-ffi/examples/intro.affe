## Hello

# The following are the main features of the OCaml-ffi

## Importing from OCaml

# using the `extern`-keyword before a type or val declarations tells Affe to
# add the typing information to the environment as usual, but not to add any
# code to the transpiled OCaml-output.

extern type string
extern val print_int : int -> unit
extern val print_endline : string -> unit
extern type ('a : 'k) option : 'k = None | Some of 'a

# This is enough to make the declarations available if they are already 
# built-in OCaml.

let func () = print_int 4

# multiple `extern`-declarations can also be condensed into one block

extern (
    type string
    val print_int : int -> unit
    val print_endline : string -> unit
    type ('a : 'k) option : 'k = None | Some of 'a
)

# To import a val or type from a specific Ocaml module, the module name
# is added after the `extern`-keyword.

extern Foo (
    val bar : string
    val print : string -> unit
    type ('a : 'k) option : 'k = None | Some of 'a
)

# This has the same effect as declaring the vals/types separately, renamed
# with the module name prefix

extern val Foo.bar : string
extern val Foo.print : string -> unit
extern type ('a : 'k) Foo.option : 'k = Foo.None | Foo.Some of 'a

# The variables can then be accessed in any later expression with the
# same module name prefix

let printbar () = Foo.print Foo.bar

# Note that the module Foo is eventually linked to the output OCaml-code 
# to make the definitions available

# OCaml's built-in modules (such as Array) can also be directly imported

extern Array (
   val init : \ 'k ('a : _). int -> (int -{'k}> 'a) -{'k}> 'a array
   val get : \ 'k ('a:_). &('k, 'a array) -> int -> 'a
)

let arr = Array.init 1 (fun i -> 2)

## Inline OCaml code

# Any OCaml expression can be assigned with the following syntax

# extern <name> <args*> : type = <| ... |>

# The translated OCaml code will look like this:

# let <name> <args*> = ( ... )

# Note that the type of the expression cannot be inferred and must be given
# explicitly. It is the users responsibility to ensure that the types match.
# Type mismatches may result in runtime errors.
# In the case that <name> is a function type, a list of parameter names can be
# provided that can also be used in the OCaml expression.

extern print i s : int -> string -> unit = <| print_int i ; print_endline s |>
extern ex : string = <| "!" |>


## Affe to OCaml translation

# Affe has a syntax that is very similar to OCaml. The translation from 
# Affe to OCaml is therefore mostly straight forward.
# In short, the translation mainly just removes borrows from expressions
# and kinds from type declarations. Some minor changes are match syntax and 
# True/False constants

type ('a: 'k, 'b: 'k) either = Left of 'a | Right of 'b

let two = let x = Left True in 
    match x with {
    | Left True -> Array.get &arr 0
    | u -> 0
}

let main = let () = 
    func ();
    print two ex;
    printbar ()
    in ()